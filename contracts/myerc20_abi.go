// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// MYERC20MetaData contains all meta data concerning the MYERC20 contract.
var MYERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC1363ApproveFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1363InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC1363InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC1363TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC1363TransferFromFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLoan\",\"type\":\"uint256\"}],\"name\":\"ERC3156ExceededMaxLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC3156InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC3156UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x610160604052348015610010575f5ffd5b5060405161441d38038061441d8339818101604052810190610032919061080a565b6040518060400160405280600781526020017f4d79546f6b656e00000000000000000000000000000000000000000000000000815250806040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250836040518060400160405280600781526020017f4d79546f6b656e000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d544b0000000000000000000000000000000000000000000000000000000000815250816003908161011b9190610a85565b50806004908161012b9190610a85565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361019e575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016101959190610b63565b60405180910390fd5b6101ad8161029660201b60201c565b506101c260068361035b60201b90919060201c565b61012081815250506101de60078261035b60201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a0818152505061021b6103a860201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505061028f8261026b61040260201b60201c565b600a6102779190610ce4565b6103e86102849190610d2e565b61040a60201b60201c565b5050610f81565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f60208351101561037c576103758361048f60201b60201c565b90506103a2565b8261038c836104f460201b60201c565b5f01908161039a9190610a85565b5060ff5f1b90505b92915050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e0516101005146306040516020016103e7959493929190610d96565b60405160208183030381529060405280519060200120905090565b5f6012905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361047a575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016104719190610b63565b60405180910390fd5b61048b5f83836104fd60201b60201c565b5050565b5f5f829050601f815111156104db57826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016104d29190610e4d565b60405180910390fd5b8051816104e790610e9a565b5f1c175f1b915050919050565b5f819050919050565b61050e83838361051360201b60201c565b505050565b61052161053760201b60201c565b61053283838361057e60201b60201c565b505050565b61054561079760201b60201c565b1561057c576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105ce578060025f8282546105c29190610f00565b9250508190555061069c565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610657578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161064e93929190610f33565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106e3578060025f828254039250508190555061072d565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161078a9190610f68565b60405180910390a3505050565b5f60055f9054906101000a900460ff16905090565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6107d9826107b0565b9050919050565b6107e9816107cf565b81146107f3575f5ffd5b50565b5f81519050610804816107e0565b92915050565b5f5f604083850312156108205761081f6107ac565b5b5f61082d858286016107f6565b925050602061083e858286016107f6565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806108c357607f821691505b6020821081036108d6576108d561087f565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026109387fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826108fd565b61094286836108fd565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61098661098161097c8461095a565b610963565b61095a565b9050919050565b5f819050919050565b61099f8361096c565b6109b36109ab8261098d565b848454610909565b825550505050565b5f5f905090565b6109ca6109bb565b6109d5818484610996565b505050565b5b818110156109f8576109ed5f826109c2565b6001810190506109db565b5050565b601f821115610a3d57610a0e816108dc565b610a17846108ee565b81016020851015610a26578190505b610a3a610a32856108ee565b8301826109da565b50505b505050565b5f82821c905092915050565b5f610a5d5f1984600802610a42565b1980831691505092915050565b5f610a758383610a4e565b9150826002028217905092915050565b610a8e82610848565b67ffffffffffffffff811115610aa757610aa6610852565b5b610ab182546108ac565b610abc8282856109fc565b5f60209050601f831160018114610aed575f8415610adb578287015190505b610ae58582610a6a565b865550610b4c565b601f198416610afb866108dc565b5f5b82811015610b2257848901518255600182019150602085019450602081019050610afd565b86831015610b3f5784890151610b3b601f891682610a4e565b8355505b6001600288020188555050505b505050505050565b610b5d816107cf565b82525050565b5f602082019050610b765f830184610b54565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f5f8291508390505b6001851115610bfe57808604811115610bda57610bd9610b7c565b5b6001851615610be95780820291505b8081029050610bf785610ba9565b9450610bbe565b94509492505050565b5f82610c165760019050610cd1565b81610c23575f9050610cd1565b8160018114610c395760028114610c4357610c72565b6001915050610cd1565b60ff841115610c5557610c54610b7c565b5b8360020a915084821115610c6c57610c6b610b7c565b5b50610cd1565b5060208310610133831016604e8410600b8410161715610ca75782820a905083811115610ca257610ca1610b7c565b5b610cd1565b610cb48484846001610bb5565b92509050818404811115610ccb57610cca610b7c565b5b81810290505b9392505050565b5f60ff82169050919050565b5f610cee8261095a565b9150610cf983610cd8565b9250610d267fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610c07565b905092915050565b5f610d388261095a565b9150610d438361095a565b9250828202610d518161095a565b91508282048414831517610d6857610d67610b7c565b5b5092915050565b5f819050919050565b610d8181610d6f565b82525050565b610d908161095a565b82525050565b5f60a082019050610da95f830188610d78565b610db66020830187610d78565b610dc36040830186610d78565b610dd06060830185610d87565b610ddd6080830184610b54565b9695505050505050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e1f82610848565b610e298185610de7565b9350610e39818560208601610df7565b610e4281610e05565b840191505092915050565b5f6020820190508181035f830152610e658184610e15565b905092915050565b5f81519050919050565b5f819050602082019050919050565b5f610e918251610d6f565b80915050919050565b5f610ea482610e6d565b82610eae84610e77565b9050610eb981610e86565b92506020821015610ef957610ef47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026108fd565b831692505b5050919050565b5f610f0a8261095a565b9150610f158361095a565b9250828201905080821115610f2d57610f2c610b7c565b5b92915050565b5f606082019050610f465f830186610b54565b610f536020830185610d87565b610f606040830184610d87565b949350505050565b5f602082019050610f7b5f830184610d87565b92915050565b60805160a05160c05160e05161010051610120516101405161344b610fd25f395f6119e301525f6119a801525f611ec101525f611ea001525f6113ab01525f61140101525f61142a015261344b5ff3fe608060405234801561000f575f5ffd5b50600436106101f2575f3560e01c806370a082311161010d578063a9059cbb116100a0578063d8fbe9941161006f578063d8fbe99414610622578063d9d98ce414610652578063dd62ed3e14610682578063f2fde38b146106b2576101f3565b8063a9059cbb14610576578063c1d34b89146105a6578063cae9ca51146105d6578063d505accf14610606576101f3565b80638456cb59116100dc5780638456cb591461050c57806384b0196e146105165780638da5cb5b1461053a57806395d89b4114610558576101f3565b806370a0823114610486578063715018a6146104b657806379cc6790146104c05780637ecebe00146104dc576101f3565b80633644e5151161018557806342966c681161015457806342966c68146103ec5780635c975abb146104085780635cffe9de14610426578063613255ab14610456576101f3565b80633644e515146103785780633f4ba83a146103965780634000aea0146103a057806340c10f19146103d0576101f3565b806318160ddd116101c157806318160ddd146102dc57806323b872dd146102fa578063313ce5671461032a5780633177029f14610348576101f3565b806301ffc9a71461022e57806306fdde031461025e578063095ea7b31461027c5780631296ee62146102ac576101f3565b5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022590612613565b60405180910390fd5b61024860048036038101906102439190612697565b6106ce565b60405161025591906126dc565b60405180910390f35b610266610747565b6040516102739190612755565b60405180910390f35b61029660048036038101906102919190612802565b6107d7565b6040516102a391906126dc565b60405180910390f35b6102c660048036038101906102c19190612802565b6107f9565b6040516102d391906126dc565b60405180910390f35b6102e461081b565b6040516102f1919061284f565b60405180910390f35b610314600480360381019061030f9190612868565b610824565b60405161032191906126dc565b60405180910390f35b610332610852565b60405161033f91906128d3565b60405180910390f35b610362600480360381019061035d9190612802565b61085a565b60405161036f91906126dc565b60405180910390f35b61038061087c565b60405161038d9190612904565b60405180910390f35b61039e61088a565b005b6103ba60048036038101906103b59190612a49565b61089c565b6040516103c791906126dc565b60405180910390f35b6103ea60048036038101906103e59190612802565b610910565b005b61040660048036038101906104019190612ab5565b610926565b005b61041061093a565b60405161041d91906126dc565b60405180910390f35b610440600480360381019061043b9190612b78565b61094f565b60405161044d91906126dc565b60405180910390f35b610470600480360381019061046b9190612bfc565b610b44565b60405161047d919061284f565b60405180910390f35b6104a0600480360381019061049b9190612bfc565b610bb9565b6040516104ad919061284f565b60405180910390f35b6104be610bfe565b005b6104da60048036038101906104d59190612802565b610c11565b005b6104f660048036038101906104f19190612bfc565b610c31565b604051610503919061284f565b60405180910390f35b610514610c42565b005b61051e610c54565b6040516105319796959493929190612d27565b60405180910390f35b610542610cf9565b60405161054f9190612da9565b60405180910390f35b610560610d22565b60405161056d9190612755565b60405180910390f35b610590600480360381019061058b9190612802565b610db2565b60405161059d91906126dc565b60405180910390f35b6105c060048036038101906105bb9190612dc2565b610dd4565b6040516105cd91906126dc565b60405180910390f35b6105f060048036038101906105eb9190612a49565b610e45565b6040516105fd91906126dc565b60405180910390f35b610620600480360381019061061b9190612e96565b610eb1565b005b61063c60048036038101906106379190612868565b610ff6565b60405161064991906126dc565b60405180910390f35b61066c60048036038101906106679190612802565b61101a565b604051610679919061284f565b60405180910390f35b61069c60048036038101906106979190612f33565b61109d565b6040516106a9919061284f565b60405180910390f35b6106cc60048036038101906106c79190612bfc565b61111f565b005b5f7fb0202a11000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610740575061073f826111a3565b5b9050919050565b60606003805461075690612f9e565b80601f016020809104026020016040519081016040528092919081815260200182805461078290612f9e565b80156107cd5780601f106107a4576101008083540402835291602001916107cd565b820191905f5260205f20905b8154815290600101906020018083116107b057829003601f168201915b5050505050905090565b5f5f6107e161120c565b90506107ee818585611213565b600191505092915050565b5f610813838360405180602001604052805f81525061089c565b905092915050565b5f600254905090565b5f5f61082e61120c565b905061083b858285611225565b6108468585856112b8565b60019150509392505050565b5f6012905090565b5f610874838360405180602001604052805f815250610e45565b905092915050565b5f6108856113a8565b905090565b61089261145e565b61089a6114e5565b565b5f6108a78484610db2565b6108ea5783836040517f231b03ae0000000000000000000000000000000000000000000000000000000081526004016108e1929190612fce565b60405180910390fd5b6109056108f561120c565b6108fd61120c565b868686611546565b600190509392505050565b61091861145e565b610922828261172d565b5050565b61093761093161120c565b826117ac565b50565b5f60055f9054906101000a900460ff16905090565b5f5f61095a86610b44565b9050808511156109a157806040517ffd9a7609000000000000000000000000000000000000000000000000000000008152600401610998919061284f565b60405180910390fd5b5f6109ac878761101a565b90506109b8888761172d565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98873ffffffffffffffffffffffffffffffffffffffff166323e30c8b6109fd61120c565b8a8a868b8b6040518763ffffffff1660e01b8152600401610a2396959493929190613031565b6020604051808303815f875af1158015610a3f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a63919061309f565b14610aa557876040517f678c5b00000000000000000000000000000000000000000000000000000000008152600401610a9c9190612da9565b60405180910390fd5b5f610aae61182b565b9050610ac68930848a610ac191906130f7565b611225565b5f821480610aff57505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15610b1e57610b19898389610b1491906130f7565b6117ac565b610b34565b610b2889886117ac565b610b338982846112b8565b5b6001935050505095945050505050565b5f3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610b7e575f610bb2565b610b8661081b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610bb1919061312a565b5b9050919050565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610c0661145e565b610c0f5f611832565b565b610c2382610c1d61120c565b83611225565b610c2d82826117ac565b5050565b5f610c3b826118f7565b9050919050565b610c4a61145e565b610c5261193d565b565b5f6060805f5f5f6060610c6561199f565b610c6d6119da565b46305f5f1b5f67ffffffffffffffff811115610c8c57610c8b612925565b5b604051908082528060200260200182016040528015610cba5781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610d3190612f9e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5d90612f9e565b8015610da85780601f10610d7f57610100808354040283529160200191610da8565b820191905f5260205f20905b815481529060010190602001808311610d8b57829003601f168201915b5050505050905090565b5f5f610dbc61120c565b9050610dc98185856112b8565b600191505092915050565b5f610de0858585610824565b610e25578484846040517fb56855e6000000000000000000000000000000000000000000000000000000008152600401610e1c9392919061315d565b60405180910390fd5b610e39610e3061120c565b86868686611546565b60019050949350505050565b5f610e5084846107d7565b610e935783836040517f50e555c4000000000000000000000000000000000000000000000000000000008152600401610e8a929190612fce565b60405180910390fd5b610ea6610e9e61120c565b858585611a15565b600190509392505050565b83421115610ef657836040517f62791302000000000000000000000000000000000000000000000000000000008152600401610eed919061284f565b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610f248c611bf9565b89604051602001610f3a96959493929190613192565b6040516020818303038152906040528051906020012090505f610f5c82611c4c565b90505f610f6b82878787611c65565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610fdf57808a6040517f4b800e46000000000000000000000000000000000000000000000000000000008152600401610fd69291906131f1565b60405180910390fd5b610fea8a8a8a611213565b50505050505050505050565b5f61101184848460405180602001604052805f815250610dd4565b90509392505050565b5f3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461108b57826040517fb5a7db920000000000000000000000000000000000000000000000000000000081526004016110829190612da9565b60405180910390fd5b6110958383611c93565b905092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b61112761145e565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611197575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161118e9190612da9565b60405180910390fd5b6111a081611832565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f33905090565b6112208383836001611c9d565b505050565b5f611230848461109d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156112b257818110156112a3578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161129a93929190613218565b60405180910390fd5b6112b184848484035f611c9d565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611328575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161131f9190612da9565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611398575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161138f9190612da9565b60405180910390fd5b6113a3838383611e6c565b505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561142357507f000000000000000000000000000000000000000000000000000000000000000046145b15611450577f0000000000000000000000000000000000000000000000000000000000000000905061145b565b611458611e7c565b90505b90565b61146661120c565b73ffffffffffffffffffffffffffffffffffffffff16611484610cf9565b73ffffffffffffffffffffffffffffffffffffffff16146114e3576114a761120c565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114da9190612da9565b60405180910390fd5b565b6114ed611f11565b5f60055f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61152f61120c565b60405161153c9190612da9565b60405180910390a1565b5f8373ffffffffffffffffffffffffffffffffffffffff163b036115a157826040517f8a96cd9c0000000000000000000000000000000000000000000000000000000081526004016115989190612da9565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166388a7ca5c868685856040518563ffffffff1660e01b81526004016115e0949392919061328f565b6020604051808303815f875af192505050801561161b57506040513d601f19601f8201168201806040525081019061161891906132ed565b60015b61169c573d805f8114611649576040519150601f19603f3d011682016040523d82523d5f602084013e61164e565b606091505b505f81510361169457836040517f8a96cd9c00000000000000000000000000000000000000000000000000000000815260040161168b9190612da9565b60405180910390fd5b805160208201fd5b6388a7ca5c60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461172557836040517f8a96cd9c00000000000000000000000000000000000000000000000000000000815260040161171c9190612da9565b60405180910390fd5b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361179d575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016117949190612da9565b60405180910390fd5b6117a85f8383611e6c565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361181c575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016118139190612da9565b60405180910390fd5b611827825f83611e6c565b5050565b5f5f905090565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f60085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b611945611f51565b600160055f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861198861120c565b6040516119959190612da9565b60405180910390a1565b60606119d560067f0000000000000000000000000000000000000000000000000000000000000000611f9290919063ffffffff16565b905090565b6060611a1060077f0000000000000000000000000000000000000000000000000000000000000000611f9290919063ffffffff16565b905090565b5f8373ffffffffffffffffffffffffffffffffffffffff163b03611a7057826040517fdeb6d3ed000000000000000000000000000000000000000000000000000000008152600401611a679190612da9565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16637b04a2d08584846040518463ffffffff1660e01b8152600401611aad93929190613318565b6020604051808303815f875af1925050508015611ae857506040513d601f19601f82011682018060405250810190611ae591906132ed565b60015b611b69573d805f8114611b16576040519150601f19603f3d011682016040523d82523d5f602084013e611b1b565b606091505b505f815103611b6157836040517fdeb6d3ed000000000000000000000000000000000000000000000000000000008152600401611b589190612da9565b60405180910390fd5b805160208201fd5b637b04a2d060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611bf257836040517fdeb6d3ed000000000000000000000000000000000000000000000000000000008152600401611be99190612da9565b60405180910390fd5b5050505050565b5f60085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190600101919050559050919050565b5f611c5e611c586113a8565b8361203f565b9050919050565b5f5f5f5f611c758888888861207f565b925092509250611c858282612166565b829350505050949350505050565b5f5f905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611d0d575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401611d049190612da9565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d7d575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401611d749190612da9565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611e66578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051611e5d919061284f565b60405180910390a35b50505050565b611e778383836122c8565b505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001611ef6959493929190613354565b60405160208183030381529060405280519060200120905090565b611f1961093a565b611f4f576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611f5961093a565b15611f90576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606060ff5f1b8314611fae57611fa7836122e0565b9050612039565b818054611fba90612f9e565b80601f0160208091040260200160405190810160405280929190818152602001828054611fe690612f9e565b80156120315780601f1061200857610100808354040283529160200191612031565b820191905f5260205f20905b81548152906001019060200180831161201457829003601f168201915b505050505090505b92915050565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f5f5f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c11156120bb575f60038592509250925061215c565b5f6001888888886040515f81526020016040526040516120de94939291906133a5565b6020604051602081039080840390855afa1580156120fe573d5f5f3e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361214f575f60015f5f1b9350935093505061215c565b805f5f5f1b935093509350505b9450945094915050565b5f6003811115612179576121786133e8565b5b82600381111561218c5761218b6133e8565b5b03156122c457600160038111156121a6576121a56133e8565b5b8260038111156121b9576121b86133e8565b5b036121f0576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003811115612204576122036133e8565b5b826003811115612217576122166133e8565b5b0361225b57805f1c6040517ffce698f7000000000000000000000000000000000000000000000000000000008152600401612252919061284f565b60405180910390fd5b60038081111561226e5761226d6133e8565b5b826003811115612281576122806133e8565b5b036122c357806040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004016122ba9190612904565b60405180910390fd5b5b5050565b6122d0611f51565b6122db838383612352565b505050565b60605f6122ec8361256b565b90505f602067ffffffffffffffff81111561230a57612309612925565b5b6040519080825280601f01601f19166020018201604052801561233c5781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036123a2578060025f82825461239691906130f7565b92505081905550612470565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508181101561242b578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161242293929190613218565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036124b7578060025f8282540392505081905550612501565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161255e919061284f565b60405180910390a3505050565b5f5f60ff835f1c169050601f8111156125b0576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b5f82825260208201905092915050565b7f496e76616c69645472616e73616374696f6e00000000000000000000000000005f82015250565b5f6125fd6012836125b9565b9150612608826125c9565b602082019050919050565b5f6020820190508181035f83015261262a816125f1565b9050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61267681612642565b8114612680575f5ffd5b50565b5f813590506126918161266d565b92915050565b5f602082840312156126ac576126ab61263a565b5b5f6126b984828501612683565b91505092915050565b5f8115159050919050565b6126d6816126c2565b82525050565b5f6020820190506126ef5f8301846126cd565b92915050565b5f81519050919050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f612727826126f5565b61273181856125b9565b93506127418185602086016126ff565b61274a8161270d565b840191505092915050565b5f6020820190508181035f83015261276d818461271d565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61279e82612775565b9050919050565b6127ae81612794565b81146127b8575f5ffd5b50565b5f813590506127c9816127a5565b92915050565b5f819050919050565b6127e1816127cf565b81146127eb575f5ffd5b50565b5f813590506127fc816127d8565b92915050565b5f5f604083850312156128185761281761263a565b5b5f612825858286016127bb565b9250506020612836858286016127ee565b9150509250929050565b612849816127cf565b82525050565b5f6020820190506128625f830184612840565b92915050565b5f5f5f6060848603121561287f5761287e61263a565b5b5f61288c868287016127bb565b935050602061289d868287016127bb565b92505060406128ae868287016127ee565b9150509250925092565b5f60ff82169050919050565b6128cd816128b8565b82525050565b5f6020820190506128e65f8301846128c4565b92915050565b5f819050919050565b6128fe816128ec565b82525050565b5f6020820190506129175f8301846128f5565b92915050565b5f5ffd5b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61295b8261270d565b810181811067ffffffffffffffff8211171561297a57612979612925565b5b80604052505050565b5f61298c612631565b90506129988282612952565b919050565b5f67ffffffffffffffff8211156129b7576129b6612925565b5b6129c08261270d565b9050602081019050919050565b828183375f83830152505050565b5f6129ed6129e88461299d565b612983565b905082815260208101848484011115612a0957612a08612921565b5b612a148482856129cd565b509392505050565b5f82601f830112612a3057612a2f61291d565b5b8135612a408482602086016129db565b91505092915050565b5f5f5f60608486031215612a6057612a5f61263a565b5b5f612a6d868287016127bb565b9350506020612a7e868287016127ee565b925050604084013567ffffffffffffffff811115612a9f57612a9e61263e565b5b612aab86828701612a1c565b9150509250925092565b5f60208284031215612aca57612ac961263a565b5b5f612ad7848285016127ee565b91505092915050565b5f612aea82612794565b9050919050565b612afa81612ae0565b8114612b04575f5ffd5b50565b5f81359050612b1581612af1565b92915050565b5f5ffd5b5f5ffd5b5f5f83601f840112612b3857612b3761291d565b5b8235905067ffffffffffffffff811115612b5557612b54612b1b565b5b602083019150836001820283011115612b7157612b70612b1f565b5b9250929050565b5f5f5f5f5f60808688031215612b9157612b9061263a565b5b5f612b9e88828901612b07565b9550506020612baf888289016127bb565b9450506040612bc0888289016127ee565b935050606086013567ffffffffffffffff811115612be157612be061263e565b5b612bed88828901612b23565b92509250509295509295909350565b5f60208284031215612c1157612c1061263a565b5b5f612c1e848285016127bb565b91505092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b612c5b81612c27565b82525050565b612c6a81612794565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b612ca2816127cf565b82525050565b5f612cb38383612c99565b60208301905092915050565b5f602082019050919050565b5f612cd582612c70565b612cdf8185612c7a565b9350612cea83612c8a565b805f5b83811015612d1a578151612d018882612ca8565b9750612d0c83612cbf565b925050600181019050612ced565b5085935050505092915050565b5f60e082019050612d3a5f83018a612c52565b8181036020830152612d4c818961271d565b90508181036040830152612d60818861271d565b9050612d6f6060830187612840565b612d7c6080830186612c61565b612d8960a08301856128f5565b81810360c0830152612d9b8184612ccb565b905098975050505050505050565b5f602082019050612dbc5f830184612c61565b92915050565b5f5f5f5f60808587031215612dda57612dd961263a565b5b5f612de7878288016127bb565b9450506020612df8878288016127bb565b9350506040612e09878288016127ee565b925050606085013567ffffffffffffffff811115612e2a57612e2961263e565b5b612e3687828801612a1c565b91505092959194509250565b612e4b816128b8565b8114612e55575f5ffd5b50565b5f81359050612e6681612e42565b92915050565b612e75816128ec565b8114612e7f575f5ffd5b50565b5f81359050612e9081612e6c565b92915050565b5f5f5f5f5f5f5f60e0888a031215612eb157612eb061263a565b5b5f612ebe8a828b016127bb565b9750506020612ecf8a828b016127bb565b9650506040612ee08a828b016127ee565b9550506060612ef18a828b016127ee565b9450506080612f028a828b01612e58565b93505060a0612f138a828b01612e82565b92505060c0612f248a828b01612e82565b91505092959891949750929550565b5f5f60408385031215612f4957612f4861263a565b5b5f612f56858286016127bb565b9250506020612f67858286016127bb565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612fb557607f821691505b602082108103612fc857612fc7612f71565b5b50919050565b5f604082019050612fe15f830185612c61565b612fee6020830184612840565b9392505050565b5f82825260208201905092915050565b5f6130108385612ff5565b935061301d8385846129cd565b6130268361270d565b840190509392505050565b5f60a0820190506130445f830189612c61565b6130516020830188612c61565b61305e6040830187612840565b61306b6060830186612840565b818103608083015261307e818486613005565b9050979650505050505050565b5f8151905061309981612e6c565b92915050565b5f602082840312156130b4576130b361263a565b5b5f6130c18482850161308b565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613101826127cf565b915061310c836127cf565b9250828201905080821115613124576131236130ca565b5b92915050565b5f613134826127cf565b915061313f836127cf565b9250828203905081811115613157576131566130ca565b5b92915050565b5f6060820190506131705f830186612c61565b61317d6020830185612c61565b61318a6040830184612840565b949350505050565b5f60c0820190506131a55f8301896128f5565b6131b26020830188612c61565b6131bf6040830187612c61565b6131cc6060830186612840565b6131d96080830185612840565b6131e660a0830184612840565b979650505050505050565b5f6040820190506132045f830185612c61565b6132116020830184612c61565b9392505050565b5f60608201905061322b5f830186612c61565b6132386020830185612840565b6132456040830184612840565b949350505050565b5f81519050919050565b5f6132618261324d565b61326b8185612ff5565b935061327b8185602086016126ff565b6132848161270d565b840191505092915050565b5f6080820190506132a25f830187612c61565b6132af6020830186612c61565b6132bc6040830185612840565b81810360608301526132ce8184613257565b905095945050505050565b5f815190506132e78161266d565b92915050565b5f602082840312156133025761330161263a565b5b5f61330f848285016132d9565b91505092915050565b5f60608201905061332b5f830186612c61565b6133386020830185612840565b818103604083015261334a8184613257565b9050949350505050565b5f60a0820190506133675f8301886128f5565b61337460208301876128f5565b61338160408301866128f5565b61338e6060830185612840565b61339b6080830184612c61565b9695505050505050565b5f6080820190506133b85f8301876128f5565b6133c560208301866128c4565b6133d260408301856128f5565b6133df60608301846128f5565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffdfea26469706673582212208bb84d17463a46ca3139221c252ce9b07b9eb85b4d471fd5ea305fbf81a123eb64736f6c634300081e0033",
}

// MYERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use MYERC20MetaData.ABI instead.
var MYERC20ABI = MYERC20MetaData.ABI

// MYERC20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MYERC20MetaData.Bin instead.
var MYERC20Bin = MYERC20MetaData.Bin

// DeployMYERC20 deploys a new Ethereum contract, binding an instance of MYERC20 to it.
func DeployMYERC20(auth *bind.TransactOpts, backend bind.ContractBackend, recipient common.Address, initialOwner common.Address) (common.Address, *types.Transaction, *MYERC20, error) {
	parsed, err := MYERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MYERC20Bin), backend, recipient, initialOwner)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MYERC20{MYERC20Caller: MYERC20Caller{contract: contract}, MYERC20Transactor: MYERC20Transactor{contract: contract}, MYERC20Filterer: MYERC20Filterer{contract: contract}}, nil
}

// MYERC20 is an auto generated Go binding around an Ethereum contract.
type MYERC20 struct {
	MYERC20Caller     // Read-only binding to the contract
	MYERC20Transactor // Write-only binding to the contract
	MYERC20Filterer   // Log filterer for contract events
}

// MYERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type MYERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MYERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MYERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MYERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MYERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MYERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MYERC20Session struct {
	Contract     *MYERC20          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MYERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MYERC20CallerSession struct {
	Contract *MYERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// MYERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MYERC20TransactorSession struct {
	Contract     *MYERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// MYERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type MYERC20Raw struct {
	Contract *MYERC20 // Generic contract binding to access the raw methods on
}

// MYERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MYERC20CallerRaw struct {
	Contract *MYERC20Caller // Generic read-only contract binding to access the raw methods on
}

// MYERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MYERC20TransactorRaw struct {
	Contract *MYERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMYERC20 creates a new instance of MYERC20, bound to a specific deployed contract.
func NewMYERC20(address common.Address, backend bind.ContractBackend) (*MYERC20, error) {
	contract, err := bindMYERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MYERC20{MYERC20Caller: MYERC20Caller{contract: contract}, MYERC20Transactor: MYERC20Transactor{contract: contract}, MYERC20Filterer: MYERC20Filterer{contract: contract}}, nil
}

// NewMYERC20Caller creates a new read-only instance of MYERC20, bound to a specific deployed contract.
func NewMYERC20Caller(address common.Address, caller bind.ContractCaller) (*MYERC20Caller, error) {
	contract, err := bindMYERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MYERC20Caller{contract: contract}, nil
}

// NewMYERC20Transactor creates a new write-only instance of MYERC20, bound to a specific deployed contract.
func NewMYERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*MYERC20Transactor, error) {
	contract, err := bindMYERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MYERC20Transactor{contract: contract}, nil
}

// NewMYERC20Filterer creates a new log filterer instance of MYERC20, bound to a specific deployed contract.
func NewMYERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*MYERC20Filterer, error) {
	contract, err := bindMYERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MYERC20Filterer{contract: contract}, nil
}

// bindMYERC20 binds a generic wrapper to an already deployed contract.
func bindMYERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MYERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MYERC20 *MYERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MYERC20.Contract.MYERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MYERC20 *MYERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MYERC20.Contract.MYERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MYERC20 *MYERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MYERC20.Contract.MYERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MYERC20 *MYERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MYERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MYERC20 *MYERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MYERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MYERC20 *MYERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MYERC20.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_MYERC20 *MYERC20Caller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_MYERC20 *MYERC20Session) DOMAINSEPARATOR() ([32]byte, error) {
	return _MYERC20.Contract.DOMAINSEPARATOR(&_MYERC20.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_MYERC20 *MYERC20CallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _MYERC20.Contract.DOMAINSEPARATOR(&_MYERC20.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MYERC20 *MYERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MYERC20 *MYERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MYERC20.Contract.Allowance(&_MYERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MYERC20 *MYERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MYERC20.Contract.Allowance(&_MYERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MYERC20 *MYERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MYERC20 *MYERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _MYERC20.Contract.BalanceOf(&_MYERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MYERC20 *MYERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MYERC20.Contract.BalanceOf(&_MYERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MYERC20 *MYERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MYERC20 *MYERC20Session) Decimals() (uint8, error) {
	return _MYERC20.Contract.Decimals(&_MYERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MYERC20 *MYERC20CallerSession) Decimals() (uint8, error) {
	return _MYERC20.Contract.Decimals(&_MYERC20.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_MYERC20 *MYERC20Caller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_MYERC20 *MYERC20Session) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _MYERC20.Contract.Eip712Domain(&_MYERC20.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_MYERC20 *MYERC20CallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _MYERC20.Contract.Eip712Domain(&_MYERC20.CallOpts)
}

// FlashFee is a free data retrieval call binding the contract method 0xd9d98ce4.
//
// Solidity: function flashFee(address token, uint256 value) view returns(uint256)
func (_MYERC20 *MYERC20Caller) FlashFee(opts *bind.CallOpts, token common.Address, value *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "flashFee", token, value)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FlashFee is a free data retrieval call binding the contract method 0xd9d98ce4.
//
// Solidity: function flashFee(address token, uint256 value) view returns(uint256)
func (_MYERC20 *MYERC20Session) FlashFee(token common.Address, value *big.Int) (*big.Int, error) {
	return _MYERC20.Contract.FlashFee(&_MYERC20.CallOpts, token, value)
}

// FlashFee is a free data retrieval call binding the contract method 0xd9d98ce4.
//
// Solidity: function flashFee(address token, uint256 value) view returns(uint256)
func (_MYERC20 *MYERC20CallerSession) FlashFee(token common.Address, value *big.Int) (*big.Int, error) {
	return _MYERC20.Contract.FlashFee(&_MYERC20.CallOpts, token, value)
}

// MaxFlashLoan is a free data retrieval call binding the contract method 0x613255ab.
//
// Solidity: function maxFlashLoan(address token) view returns(uint256)
func (_MYERC20 *MYERC20Caller) MaxFlashLoan(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "maxFlashLoan", token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxFlashLoan is a free data retrieval call binding the contract method 0x613255ab.
//
// Solidity: function maxFlashLoan(address token) view returns(uint256)
func (_MYERC20 *MYERC20Session) MaxFlashLoan(token common.Address) (*big.Int, error) {
	return _MYERC20.Contract.MaxFlashLoan(&_MYERC20.CallOpts, token)
}

// MaxFlashLoan is a free data retrieval call binding the contract method 0x613255ab.
//
// Solidity: function maxFlashLoan(address token) view returns(uint256)
func (_MYERC20 *MYERC20CallerSession) MaxFlashLoan(token common.Address) (*big.Int, error) {
	return _MYERC20.Contract.MaxFlashLoan(&_MYERC20.CallOpts, token)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MYERC20 *MYERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MYERC20 *MYERC20Session) Name() (string, error) {
	return _MYERC20.Contract.Name(&_MYERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MYERC20 *MYERC20CallerSession) Name() (string, error) {
	return _MYERC20.Contract.Name(&_MYERC20.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_MYERC20 *MYERC20Caller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_MYERC20 *MYERC20Session) Nonces(owner common.Address) (*big.Int, error) {
	return _MYERC20.Contract.Nonces(&_MYERC20.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_MYERC20 *MYERC20CallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _MYERC20.Contract.Nonces(&_MYERC20.CallOpts, owner)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MYERC20 *MYERC20Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MYERC20 *MYERC20Session) Owner() (common.Address, error) {
	return _MYERC20.Contract.Owner(&_MYERC20.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MYERC20 *MYERC20CallerSession) Owner() (common.Address, error) {
	return _MYERC20.Contract.Owner(&_MYERC20.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MYERC20 *MYERC20Caller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MYERC20 *MYERC20Session) Paused() (bool, error) {
	return _MYERC20.Contract.Paused(&_MYERC20.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MYERC20 *MYERC20CallerSession) Paused() (bool, error) {
	return _MYERC20.Contract.Paused(&_MYERC20.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MYERC20 *MYERC20Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MYERC20 *MYERC20Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MYERC20.Contract.SupportsInterface(&_MYERC20.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_MYERC20 *MYERC20CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _MYERC20.Contract.SupportsInterface(&_MYERC20.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MYERC20 *MYERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MYERC20 *MYERC20Session) Symbol() (string, error) {
	return _MYERC20.Contract.Symbol(&_MYERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MYERC20 *MYERC20CallerSession) Symbol() (string, error) {
	return _MYERC20.Contract.Symbol(&_MYERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MYERC20 *MYERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MYERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MYERC20 *MYERC20Session) TotalSupply() (*big.Int, error) {
	return _MYERC20.Contract.TotalSupply(&_MYERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MYERC20 *MYERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _MYERC20.Contract.TotalSupply(&_MYERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "approve", spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Session) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.Approve(&_MYERC20.TransactOpts, spender, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 value) returns(bool)
func (_MYERC20 *MYERC20TransactorSession) Approve(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.Approve(&_MYERC20.TransactOpts, spender, value)
}

// ApproveAndCall is a paid mutator transaction binding the contract method 0x3177029f.
//
// Solidity: function approveAndCall(address spender, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Transactor) ApproveAndCall(opts *bind.TransactOpts, spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "approveAndCall", spender, value)
}

// ApproveAndCall is a paid mutator transaction binding the contract method 0x3177029f.
//
// Solidity: function approveAndCall(address spender, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Session) ApproveAndCall(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.ApproveAndCall(&_MYERC20.TransactOpts, spender, value)
}

// ApproveAndCall is a paid mutator transaction binding the contract method 0x3177029f.
//
// Solidity: function approveAndCall(address spender, uint256 value) returns(bool)
func (_MYERC20 *MYERC20TransactorSession) ApproveAndCall(spender common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.ApproveAndCall(&_MYERC20.TransactOpts, spender, value)
}

// ApproveAndCall0 is a paid mutator transaction binding the contract method 0xcae9ca51.
//
// Solidity: function approveAndCall(address spender, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20Transactor) ApproveAndCall0(opts *bind.TransactOpts, spender common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "approveAndCall0", spender, value, data)
}

// ApproveAndCall0 is a paid mutator transaction binding the contract method 0xcae9ca51.
//
// Solidity: function approveAndCall(address spender, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20Session) ApproveAndCall0(spender common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.Contract.ApproveAndCall0(&_MYERC20.TransactOpts, spender, value, data)
}

// ApproveAndCall0 is a paid mutator transaction binding the contract method 0xcae9ca51.
//
// Solidity: function approveAndCall(address spender, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20TransactorSession) ApproveAndCall0(spender common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.Contract.ApproveAndCall0(&_MYERC20.TransactOpts, spender, value, data)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 value) returns()
func (_MYERC20 *MYERC20Transactor) Burn(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "burn", value)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 value) returns()
func (_MYERC20 *MYERC20Session) Burn(value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.Burn(&_MYERC20.TransactOpts, value)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 value) returns()
func (_MYERC20 *MYERC20TransactorSession) Burn(value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.Burn(&_MYERC20.TransactOpts, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_MYERC20 *MYERC20Transactor) BurnFrom(opts *bind.TransactOpts, account common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "burnFrom", account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_MYERC20 *MYERC20Session) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.BurnFrom(&_MYERC20.TransactOpts, account, value)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 value) returns()
func (_MYERC20 *MYERC20TransactorSession) BurnFrom(account common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.BurnFrom(&_MYERC20.TransactOpts, account, value)
}

// FlashLoan is a paid mutator transaction binding the contract method 0x5cffe9de.
//
// Solidity: function flashLoan(address receiver, address token, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20Transactor) FlashLoan(opts *bind.TransactOpts, receiver common.Address, token common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "flashLoan", receiver, token, value, data)
}

// FlashLoan is a paid mutator transaction binding the contract method 0x5cffe9de.
//
// Solidity: function flashLoan(address receiver, address token, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20Session) FlashLoan(receiver common.Address, token common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.Contract.FlashLoan(&_MYERC20.TransactOpts, receiver, token, value, data)
}

// FlashLoan is a paid mutator transaction binding the contract method 0x5cffe9de.
//
// Solidity: function flashLoan(address receiver, address token, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20TransactorSession) FlashLoan(receiver common.Address, token common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.Contract.FlashLoan(&_MYERC20.TransactOpts, receiver, token, value, data)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_MYERC20 *MYERC20Transactor) Mint(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "mint", to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_MYERC20 *MYERC20Session) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.Mint(&_MYERC20.TransactOpts, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_MYERC20 *MYERC20TransactorSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.Mint(&_MYERC20.TransactOpts, to, amount)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MYERC20 *MYERC20Transactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MYERC20 *MYERC20Session) Pause() (*types.Transaction, error) {
	return _MYERC20.Contract.Pause(&_MYERC20.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MYERC20 *MYERC20TransactorSession) Pause() (*types.Transaction, error) {
	return _MYERC20.Contract.Pause(&_MYERC20.TransactOpts)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_MYERC20 *MYERC20Transactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_MYERC20 *MYERC20Session) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _MYERC20.Contract.Permit(&_MYERC20.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_MYERC20 *MYERC20TransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _MYERC20.Contract.Permit(&_MYERC20.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MYERC20 *MYERC20Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MYERC20 *MYERC20Session) RenounceOwnership() (*types.Transaction, error) {
	return _MYERC20.Contract.RenounceOwnership(&_MYERC20.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MYERC20 *MYERC20TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _MYERC20.Contract.RenounceOwnership(&_MYERC20.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "transfer", to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Session) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.Transfer(&_MYERC20.TransactOpts, to, value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20TransactorSession) Transfer(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.Transfer(&_MYERC20.TransactOpts, to, value)
}

// TransferAndCall is a paid mutator transaction binding the contract method 0x1296ee62.
//
// Solidity: function transferAndCall(address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Transactor) TransferAndCall(opts *bind.TransactOpts, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "transferAndCall", to, value)
}

// TransferAndCall is a paid mutator transaction binding the contract method 0x1296ee62.
//
// Solidity: function transferAndCall(address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Session) TransferAndCall(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferAndCall(&_MYERC20.TransactOpts, to, value)
}

// TransferAndCall is a paid mutator transaction binding the contract method 0x1296ee62.
//
// Solidity: function transferAndCall(address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20TransactorSession) TransferAndCall(to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferAndCall(&_MYERC20.TransactOpts, to, value)
}

// TransferAndCall0 is a paid mutator transaction binding the contract method 0x4000aea0.
//
// Solidity: function transferAndCall(address to, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20Transactor) TransferAndCall0(opts *bind.TransactOpts, to common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "transferAndCall0", to, value, data)
}

// TransferAndCall0 is a paid mutator transaction binding the contract method 0x4000aea0.
//
// Solidity: function transferAndCall(address to, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20Session) TransferAndCall0(to common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferAndCall0(&_MYERC20.TransactOpts, to, value, data)
}

// TransferAndCall0 is a paid mutator transaction binding the contract method 0x4000aea0.
//
// Solidity: function transferAndCall(address to, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20TransactorSession) TransferAndCall0(to common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferAndCall0(&_MYERC20.TransactOpts, to, value, data)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "transferFrom", from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Session) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferFrom(&_MYERC20.TransactOpts, from, to, value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20TransactorSession) TransferFrom(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferFrom(&_MYERC20.TransactOpts, from, to, value)
}

// TransferFromAndCall is a paid mutator transaction binding the contract method 0xc1d34b89.
//
// Solidity: function transferFromAndCall(address from, address to, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20Transactor) TransferFromAndCall(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "transferFromAndCall", from, to, value, data)
}

// TransferFromAndCall is a paid mutator transaction binding the contract method 0xc1d34b89.
//
// Solidity: function transferFromAndCall(address from, address to, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20Session) TransferFromAndCall(from common.Address, to common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferFromAndCall(&_MYERC20.TransactOpts, from, to, value, data)
}

// TransferFromAndCall is a paid mutator transaction binding the contract method 0xc1d34b89.
//
// Solidity: function transferFromAndCall(address from, address to, uint256 value, bytes data) returns(bool)
func (_MYERC20 *MYERC20TransactorSession) TransferFromAndCall(from common.Address, to common.Address, value *big.Int, data []byte) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferFromAndCall(&_MYERC20.TransactOpts, from, to, value, data)
}

// TransferFromAndCall0 is a paid mutator transaction binding the contract method 0xd8fbe994.
//
// Solidity: function transferFromAndCall(address from, address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Transactor) TransferFromAndCall0(opts *bind.TransactOpts, from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "transferFromAndCall0", from, to, value)
}

// TransferFromAndCall0 is a paid mutator transaction binding the contract method 0xd8fbe994.
//
// Solidity: function transferFromAndCall(address from, address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20Session) TransferFromAndCall0(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferFromAndCall0(&_MYERC20.TransactOpts, from, to, value)
}

// TransferFromAndCall0 is a paid mutator transaction binding the contract method 0xd8fbe994.
//
// Solidity: function transferFromAndCall(address from, address to, uint256 value) returns(bool)
func (_MYERC20 *MYERC20TransactorSession) TransferFromAndCall0(from common.Address, to common.Address, value *big.Int) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferFromAndCall0(&_MYERC20.TransactOpts, from, to, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MYERC20 *MYERC20Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MYERC20 *MYERC20Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferOwnership(&_MYERC20.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MYERC20 *MYERC20TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MYERC20.Contract.TransferOwnership(&_MYERC20.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MYERC20 *MYERC20Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MYERC20.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MYERC20 *MYERC20Session) Unpause() (*types.Transaction, error) {
	return _MYERC20.Contract.Unpause(&_MYERC20.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MYERC20 *MYERC20TransactorSession) Unpause() (*types.Transaction, error) {
	return _MYERC20.Contract.Unpause(&_MYERC20.TransactOpts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_MYERC20 *MYERC20Transactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _MYERC20.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_MYERC20 *MYERC20Session) Fallback(calldata []byte) (*types.Transaction, error) {
	return _MYERC20.Contract.Fallback(&_MYERC20.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_MYERC20 *MYERC20TransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _MYERC20.Contract.Fallback(&_MYERC20.TransactOpts, calldata)
}

// MYERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MYERC20 contract.
type MYERC20ApprovalIterator struct {
	Event *MYERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MYERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MYERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MYERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MYERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MYERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MYERC20Approval represents a Approval event raised by the MYERC20 contract.
type MYERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MYERC20 *MYERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MYERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MYERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MYERC20ApprovalIterator{contract: _MYERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MYERC20 *MYERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MYERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MYERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MYERC20Approval)
				if err := _MYERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MYERC20 *MYERC20Filterer) ParseApproval(log types.Log) (*MYERC20Approval, error) {
	event := new(MYERC20Approval)
	if err := _MYERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MYERC20EIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the MYERC20 contract.
type MYERC20EIP712DomainChangedIterator struct {
	Event *MYERC20EIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MYERC20EIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MYERC20EIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MYERC20EIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MYERC20EIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MYERC20EIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MYERC20EIP712DomainChanged represents a EIP712DomainChanged event raised by the MYERC20 contract.
type MYERC20EIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_MYERC20 *MYERC20Filterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*MYERC20EIP712DomainChangedIterator, error) {

	logs, sub, err := _MYERC20.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &MYERC20EIP712DomainChangedIterator{contract: _MYERC20.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_MYERC20 *MYERC20Filterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *MYERC20EIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _MYERC20.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MYERC20EIP712DomainChanged)
				if err := _MYERC20.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_MYERC20 *MYERC20Filterer) ParseEIP712DomainChanged(log types.Log) (*MYERC20EIP712DomainChanged, error) {
	event := new(MYERC20EIP712DomainChanged)
	if err := _MYERC20.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MYERC20OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the MYERC20 contract.
type MYERC20OwnershipTransferredIterator struct {
	Event *MYERC20OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MYERC20OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MYERC20OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MYERC20OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MYERC20OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MYERC20OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MYERC20OwnershipTransferred represents a OwnershipTransferred event raised by the MYERC20 contract.
type MYERC20OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MYERC20 *MYERC20Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MYERC20OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MYERC20.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MYERC20OwnershipTransferredIterator{contract: _MYERC20.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MYERC20 *MYERC20Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MYERC20OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MYERC20.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MYERC20OwnershipTransferred)
				if err := _MYERC20.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MYERC20 *MYERC20Filterer) ParseOwnershipTransferred(log types.Log) (*MYERC20OwnershipTransferred, error) {
	event := new(MYERC20OwnershipTransferred)
	if err := _MYERC20.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MYERC20PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the MYERC20 contract.
type MYERC20PausedIterator struct {
	Event *MYERC20Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MYERC20PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MYERC20Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MYERC20Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MYERC20PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MYERC20PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MYERC20Paused represents a Paused event raised by the MYERC20 contract.
type MYERC20Paused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MYERC20 *MYERC20Filterer) FilterPaused(opts *bind.FilterOpts) (*MYERC20PausedIterator, error) {

	logs, sub, err := _MYERC20.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &MYERC20PausedIterator{contract: _MYERC20.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MYERC20 *MYERC20Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *MYERC20Paused) (event.Subscription, error) {

	logs, sub, err := _MYERC20.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MYERC20Paused)
				if err := _MYERC20.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MYERC20 *MYERC20Filterer) ParsePaused(log types.Log) (*MYERC20Paused, error) {
	event := new(MYERC20Paused)
	if err := _MYERC20.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MYERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MYERC20 contract.
type MYERC20TransferIterator struct {
	Event *MYERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MYERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MYERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MYERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MYERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MYERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MYERC20Transfer represents a Transfer event raised by the MYERC20 contract.
type MYERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MYERC20 *MYERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MYERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MYERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MYERC20TransferIterator{contract: _MYERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MYERC20 *MYERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MYERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MYERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MYERC20Transfer)
				if err := _MYERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MYERC20 *MYERC20Filterer) ParseTransfer(log types.Log) (*MYERC20Transfer, error) {
	event := new(MYERC20Transfer)
	if err := _MYERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MYERC20UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the MYERC20 contract.
type MYERC20UnpausedIterator struct {
	Event *MYERC20Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MYERC20UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MYERC20Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MYERC20Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MYERC20UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MYERC20UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MYERC20Unpaused represents a Unpaused event raised by the MYERC20 contract.
type MYERC20Unpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MYERC20 *MYERC20Filterer) FilterUnpaused(opts *bind.FilterOpts) (*MYERC20UnpausedIterator, error) {

	logs, sub, err := _MYERC20.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &MYERC20UnpausedIterator{contract: _MYERC20.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MYERC20 *MYERC20Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *MYERC20Unpaused) (event.Subscription, error) {

	logs, sub, err := _MYERC20.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MYERC20Unpaused)
				if err := _MYERC20.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MYERC20 *MYERC20Filterer) ParseUnpaused(log types.Log) (*MYERC20Unpaused, error) {
	event := new(MYERC20Unpaused)
	if err := _MYERC20.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
